/**
 * @file Пример использования переменных окружения.
 *
 * Для типизации используется файл `types/env.d.ts`
 *
 * Значение каждой переменной определяется в специальных
 * файлах формата `.env`. Эти файлы хранятся отдельно от
 * основного исходного кода, что предотвращает случайную
 * утечку секретных данных в публичные репозитории.
 *
 * Основные файлы конфигурации включают:
 * .env
 * .env.local
 * .env.[mode].local
 *
 * Значение [mode] принимает `development`, `test` или `production`.
 *
 * Команда build:dev первым делом заглядывает
 * в файл `.env.development.local`
 *
 * Команда build обращается к значениям
 * в файле `.env.production.local`
 *
 * Юнит-тесты используют `.env.test.local`
 *
 * Если в обозначенных местах не обнаружилось искомых ключевых пар,
 * поиск выполняется поочерёдно в файлах `.env.local` и `.env`
 *
 * Примечание: переменные окружения
 * допускается передавать через командную строку - обратите
 * внимание на использование cross-env в package.json
 *
 * @since 0.2.1
 *
 **/

// Условие выполнится только при сборке
// командой `build:dev` (в режиме development).
//
// Если собрать проект
// командой `build` (в режиме production),
// код этого блока не попадёт на контроллер.
//
// Более того, поскольку других конструкций в скрипте нет,
// то и сам скрипт не появится в каталоге dist.
//
if (__DEV__) {

  // Выводим приветствие, подставляя название из переменной окружения.
  log(`Hello from ${process.env.APP_NAME}`)

}
